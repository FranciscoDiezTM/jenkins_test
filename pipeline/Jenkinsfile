//library "pipeline-globile@master"
def pipelineParams = [:]
if (params.OVERRIDE_JOB_PARAMETERS) {
    pipelineParams << params
} else {
    pipelineParams = [
        AGENT: 'compiler-ios',
        PROJECT_NAME: 'JenkinsDemo',
        SSH_CREDENTIALS: 'vector',
	// Steps
	// 1. Install Bundle dependencies
        SKIP_BUNDLE: false,
        CMD_BUNDLE: 'bundle install',
	// 3. Install dependencies
        SKIP_DEPENDENCIES: false,
		CMD_DEPENDENCIES: 'git submodule init && git submodule update && pod install',
	// 4. Compile and signing
        SKIP_COMPILE: false,
		// 4.1 Install Submodules
		DO_UPDATE_SUBMODULES: false,
		// automatic git submodules init && git submodules update
		DO_UPDATE_PODS: false,
		// 4.2 automatic pod install
		// IF SSH_CREDENTIALS:
		// 4.3 automatic unlock keychain
		// Execute lane to build and signing
		  CMD_COMPILE: 'bundle exec fastlane ios build',
          SIMULATOR_TYPE: "com.apple.CoreSimulator.SimDeviceType.iPhone-11",
          SIMULATOR_RUNTIME: "com.apple.CoreSimulator.SimRuntime.iOS-13-1",
          CMD_SIMULATOR_CREATE: "xcrun simctl create",
          CMD_SIMULATOR_BOOT: "xcrun simctl boot",
          CMD_SIMULATOR_SHUTDOWN: "xcrun simctl shutdown",
          CMD_SIMULATOR_DELETE: "xcrun simctl delete",

	// 5. Unit test
		SKIP_TEST: true,
        CMD_TEST: 'bundle exec fastlane ios tests',
	// 6. Execute sonar
        SKIP_SONAR: true,
        CMD_SONAR: 'bundle exec fastlane ios run_coverage',
	// 7. Execute SAST Test
		PERFORM_SAST: false,
		// Config SAST Tools [Don't change]
		SAST_TOOL_URL: 'http://mobsf-globile.eastus.cloudapp.azure.com:9000',
        SAST_TOOL: 'MobSF',
        MOBSF_AUTHORIZATION_ID: 'mobsfAuthorization',
	    SAST_SCAN_TYPE: 'ipa',
	    BINARY_FILE_FOLDER: './Build',
		BINARY_FILE_NAME: '$PROJECT_NAME.ipa',
		// Paralell 1 Execute Mobsf test
		PERFORM_MOBSF_ANALYSIS: false,
		// Paralell 2 Execute KIUWAN test
        PERFORM_KIUWAN_ANALYSIS: false,
	// 8. Distribute app in appcenter
        SKIP_DISTRIBUTE: false,
		APP_CENTER_DISTRIBUTION_GROUP: 'UPTeamIOS',
        	//DISTRIBUTION_BRANCHES: '',
		// Config App Center releases nodes [Optional]
		// APP_CENTER_RELEASES_NOTES: "Releases notes"
        CMD_DISTRIBUTE: 'bundle exec fastlane ios distribute',
	// 9. Clean workspace
        SKIP_CLEAN: false,
    ]
}
// pipelineParams.SAST_KIUWAN_PROJECT_NAME = 'functional-userpersonalizationdemo-ios-app'
//compileIOSMainApp pipelineParams


node('iOS Node') {
    stage('Checkout/Build/Test') {
        // Checkout files.
        checkout([
            $class: 'GitSCM',
            branches: [[name: 'master']],
            doGenerateSubmoduleConfigurations: false,
            extensions: [], submoduleCfg: [],
            userRemoteConfigs: [[
                name: 'github',
                url: 'https://github.com/FranciscoDiezTM/jenkins_test.git'
            ]]
        ])
        // Build and Test
        sh 'xcodebuild -scheme "JenkinsDemo" -configuration "Debug" build test -destination "platform=iOS Simulator,name=iPhone 11,OS=9.3" -enableCodeCoverage YES | /usr/local/bin/xcpretty -r junit'
        // Publish test restults.
        step([$class: 'JUnitResultArchiver', allowEmptyResults: true, testResults: 'build/reports/junit.xml'])
    }
    stage('Analytics') {
        parallel Coverage: {
            // Generate Code Coverage report
            sh '/usr/local/bin/slather coverage --jenkins --html --scheme JenkinsDemo JenkinsDemo.xcodeproj/'
            // Publish coverage results
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'html', reportFiles: 'index.html', reportName: 'Coverage Report'])
        }, Checkstyle: {
            // Generate Checkstyle report
            sh '/usr/local/bin/swiftlint lint --reporter checkstyle > checkstyle.xml || true'
            // Publish checkstyle result
            step([$class: 'CheckStylePublisher', canComputeNew: false, defaultEncoding: '', healthy: '', pattern: 'checkstyle.xml', unHealthy: ''])
        }, failFast: true|false   
    }
    stage ('Notify') {
        // Send slack notification
        //slackSend channel: '#my-team', message: 'Jenkins Demo - Successfully', teamDomain: 'my-team', token: 'my-token'
    }
}

