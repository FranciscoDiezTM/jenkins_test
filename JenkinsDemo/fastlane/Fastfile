# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
 	desc "Description of what the lane does"

	lane :beta do
	  increment_build_number
	  build_app
	  upload_to_testflight
	end

	lane :release do
	  capture_screenshots
	  build_app
	  upload_to_app_store # Upload the screenshots and the binary to iTunes
	  slack # Let your team-mates know the new version is live
	end

	lane :refreshJenkinsKeychain do
  		delete_keychain(name: "jenkins") if File.exists? File.expand_path("~/Library/Keychains/jenkins-db")
  		create_keychain(
    		name: "jenkins",
    		password: "jenkins",
    		timeout: false,
    		lock_when_sleeps: false,
    		unlock: true
  		)
	end

	lane :matchPopulateJenkinsKeychain do
    	register_devices(devices_file: "./fastlane/devices.txt")
  
    	match(
      		type: "adhoc",
      		app_identifier: [
        		"my.app.identifier"
      		]
    	)
    	match(
      		type: "development",
      		app_identifier: [
        		"my.app.identifier"
      		]
    	)
    	match(
      		type: "appstore",
      		app_identifier: [
        		"my.app.identifier"
      		]
    	)
  end

  # desc "Increment build number and commit changes to github"
  # lane :incrementBuildNumberAndCommit do
  #   ensure_git_status_clean
  #   build_number = increment_build_number
  #   commit_version_bump(message: "[skip ci] Version Bump to #{build_number}")
  #   push_to_git_remote()
  # end

  desc "Run unit and ui tests"
  lane :runTests do
  	run_tests(
    	scheme: "MyAppScheme",
      	#code_coverage: true 
    )
  end

  desc "Create coverage html"
  lane :createCoverageReport do
  	slather(
    	scheme: "MyAppScheme",
      	proj: "MyApp.xcodeproj",
      	html: true,
      	ignore: [
        	"Pods/*",
        	"MyApp/Library/*"
      	]
    )
  end


  desc "Build application"
  lane :buildAppWithGym do |options|
    gym(
      workspace: "MyApp.xcworkspace",
      scheme: "MyAppScheme",
      clean: true,
      skip_profile_detection: true,
      output_name: "myapp.ipa",
      export_method: options[:isProd] ? "app-store" : "ad-hoc",
      export_options:{
        signingStyle: "manual",
          provisioningProfiles:{
            "my.app.identifier": options[:isProd] ? "match AppStore my.app.identifier" : "match AdHoc my.app.identifier",
          }
      }
    )
  end


  # desc "Upload to fabric beta"
  # lane :callCrashlytics do |options|
  #   crashlytics(
  #     crashlytics_path: "./Pods/Crashlytics/",
  #     api_token: "**********************",
  #     build_secret: "*************************",
  #     ipa_path: "./myapp.ipa",
  #     groups:"teamios",
  #     notes:readme = File.read("./release_notes.txt"),
  #     notifications:options[:isNotificationsOpen]
  #   )
  # end

  # desc "Send application to app store"
  # lane :deliverToAppStore do
  #   deliver(
  #     submit_for_review: false,
  #     automatic_release: false,
  #     phased_release: true,
  #     force: true, # Skip HTMl report verification
  #     skip_metadata: false,
  #     skip_screenshots: true,
  #     skip_binary_upload: false
  #   )
  # end


end
